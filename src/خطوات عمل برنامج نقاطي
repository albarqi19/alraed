اطلعت على مشروعك وسأعرض الآن خطة بثلاث مراحل: توثيق متطلبات برنامج "نقاطي"، تصميم قاعدة البيانات وواجهات البرمجة اللازمة، ثم تخطيط واجهات الإدارة والمعلمين مع خارطة تنفيذ واضحة.

نظرة عامة على المتطلبات 💡
أهداف البرنامج: تعزيز السلوك الإيجابي عبر نقاط يمنحها المعلمون، مع إمكانية حسم نقاط للمخالفات، وتكريم الطلاب الأعلى رصيدًا.
الأدوار الرئيسية:
الإدارة: ضبط سياسات النقاط، متابعة أرصدة الطلاب، التحكم في الأسباب المعتمدة، توليد بطاقات الطلاب.
المعلم: منح النقاط أو تسجيل المخالفات عبر مسح QR للطالب ضمن حدود يومية محددة.
الطالب/ولي الأمر: الاستفادة من النتائج المطبوعة أو تقرير الرصيد (لاحقًا).
المتطلبات الإدارية التفصيلية:
إعداد القيم الافتراضية: الحد الأعلى اليومي لكل معلم، الحد الأعلى لنفس الطالب من نفس المعلم، تمكين/تعطيل الحسم.
إنشاء وإدارة قوائم الأسباب (سلوكيات إيجابية، مخالفات) مع تحديد قيمة النقاط لكل سبب، والتصنيف، وظهورها للمعلمين.
لوحة مراقبة: أرصدة الطلاب، أفضل الطلاب، إحصائيات يومية/أسبوعية، نسبة المستخدمين النشطين.
سجل العمليات: فلترة بحسب التاريخ، المعلم، الطالب، نوع الحركة، السبب، مصدر العملية (معلم/إدارة).
أدوات التصحيح: إضافة/خصم يدوي، إلغاء عملية، إعادة توزيع، مع سجل تدقيقي.
توليد وتصدير بطاقات الطلاب بقياس ‎4×6‎ طولي (طباعة PDF)، مع اسم الطالب، الصف، الرصيد الحالي، رمز QR معرف فريد آمن.
المتطلبات الخاصة بالمعلمين:
عنصر جديد في القائمة بعنوان "نقاطي".
اختيار حالة (نقاط/مخالفة) ثم اختيار قيمة النقاط من أزرار واضحة (0–10 مثلاً) مع ظهور السبب المطابق تلقائيًا.
بعد اختيار السبب يُفتح ماسح QR مدمج؛ عند قراءة البطاقة يُرسل الطلب فورًا ويعود للواجهة الأصلية.
إظهار الرصيد اليومي المتبقي، استخدام اليوم لكل طالب، التنبيهات عند تجاوز الحدود أو انتهاء الرصيد.
سجل مختصر لآخر العمليات مع إمكانية التراجع الفوري (خلال دقائق محددة).
متطلبات إضافية:
دعم العمل من الجوال (Camera API، PWA permissions).
حماية من الاستهلاك المفرط (Throttle، Rate limit، إعادة استخدام التوكن).
التوافق مع صلاحيات النظام الحالية (middleware admin/teacher).
قابلية التوسع لإضافة لوحات للطلاب/الأهالي مستقبلًا.
تصميم قاعدة البيانات وواجهات البرمجة 🗄️
الجداول الجديدة (Laravel migrations):
point_reasons: يحتوي الاسم، النوع (reward|violation)، القيمة، الوصف، حالة التفعيل، ترتيب العرض.
point_settings: سجل واحد للحدود العامة (daily_teacher_cap، per_student_cap، camera_required، reward_enabled، violation_enabled، إلخ).
teacher_point_settings: اختيارية لتخصيص حدود معلم محدد مع حقول override.
student_point_cards: حفظ رمز البطاقة (UUID)، تاريخ الإصدار، حالة التفعيل، آخر تجديد.
student_point_totals: إجمالي النقاط الحالية (cached)، عدد الجوائز، تاريخ آخر حركة.
point_transactions: المعرف، student_id، teacher_id، reason_id (اختياري)، amount (موجب/سالب)، type، source (teacher|admin|system)، notes، qr_token، creator_id (admin)، metadata (JSON)، timestamps.
point_daily_counters: teacher_id، date، points_awarded، points_penalized، reset_at لتسهيل التحقق السريع من الحدود دون حساب مكلف.
خدمات وتدفقات Laravel:
استخدام Jobs/Events لتحديث student_point_totals وتوليد تنبيهات.
سياسات (Policy) لضمان أن المعلم لا يعدل عمليات غيره وأن الإدارة فقط تعدل الحدود.
مزود QR: يمكن توليد التوكن داخل Student observer مع تشفير student_id وschool_year.
واجهات API (نماذج):
/admin/points/settings GET/PUT (قيمة واحدة مع validation).
/admin/points/reasons CRUD (مع البحث، الترتيب).
/admin/points/transactions GET (فلترة + pagination)، POST (تعديل يدوي)، DELETE/PUT لإلغاء أو تحديث.
/admin/points/leaderboard GET (top N، خيارات التصفية).
/admin/points/cards GET (بيانات الطباعة)، POST (إعادة توليد)، GET /admin/points/cards/pdf لملف موحد.
/teacher/points/config GET (الحدود، الرصيد المتبقي، قائمة الأسباب المصنفة).
/teacher/points/transactions POST (إرسال عملية جديدة مع {qr_token, reason_id})، يدعم نوع العملية ضمن السبب.
/teacher/points/transactions/{id}/undo POST (إلغاء فوري خلال مدة محددة).
/teacher/points/today GET (ملخص اليوم + عمليات أخيرة).
اعتبارات أمنية:
التحقق من صلاحية QR: التوكن يؤرشف في student_point_cards، ويُرفض إذا كان معطلاً أو منتهيًا.
Guard للحدود اليومية: خدمة PointQuotaService تتأكد قبل إنشاء العملية (باستخدام point_daily_counters).
تسجيل كل عملية في point_transactions مع IP/Device optional في metadata.
تخطيط واجهة الإدارة 🎛️
تقسيم الصفحة (PointsProgramPage):
شريط علوي يعرض الإحصائيات (عدد النقاط الممنوحة اليوم، رصيد أعلى طالب، نسبة المخالفات).
تبويب "الإعدادات": نموذج لإدارة الحدود اليومية مع مكونات Switch, NumberInput, حفظ فوري باستخدام React Query mutation.
تبويب "الأسباب": جدول محسن (tanstack/react-table) مع بحث، فلترة حسب النوع، أزرار إنشاء/تعديل داخل Dialog.
تبويب "سجل العمليات": جدول paginated بفلترة متقدمة (Teacher, Student, Date range, Type) مع زر تصدير CSV.
تبويب "بطاقات الطلاب": خيار اختيار فصل/صف، عرض معاينة البطاقة (4×6) باستخدام html2canvas + jspdf لتجهيز PDF للطباعة، و زر إعادة توليد QR.
تبويب "لوحة الشرف": قائمة أفضل الطلاب مع إمكانية تحديد الفترة.
بنية الكود:
إنشاء usePointsSettings, usePointsReasons, usePointTransactions hooks تحت admin/hooks للتحميل والتعديل.
مكونات UI جديدة تحت admin/components/points (مثل PointsSettingsForm, PointReasonsTable, PointCardsPreview).
الحفاظ على النمط المرئي الحالي (glass-card, ألوان Tailwind).
إضافة عنصر تنقل مفعّل بالفعل (/admin/points-program) مع إزالة شارة "قريبًا".
التكامل:
استخدام react-query مع مفاتيح namespace (['admin','points','settings']).
معالجة حالات التحميل/الأخطاء برسائل عربية ودية.
اعتماد مخطط خطوط IBM Plex والهوية البصرية القائمة.
تخطيط واجهة المعلم 📱
المسار والملاحة:
إضافة عنصر نقاطي إلى navItems في TeacherShell وتهيئة Route جديدة /teacher/points.
هيكل الصفحة:
رأس يعرض الرصيد المتبقي اليومي، عدد العمليات المنجزة، مؤشر حدود الطالب.
تبويب اختيار (SegmentedControl) بين "نقاط إيجابية" و"مخالفات".
قائمة أزرار للقيم المحددة مسبقًا (مثلاً 1،2،3،5،10). الضغط على القيمة يبرز تلقائيًا السبب المرتبط (تعرض Popover بالوصف).
بعد اختيار السبب يظهر زر "مسح بطاقة الطالب" يفتح كاميرا الجهاز (react-qr-reader أو حل مخصص) في Modal بواجهة مبسطة.
عند نجاح المسح يُرسل الطلب (Mutation)، يظهر Toast بالنجاح ويُحدّث الملخص ويُغلق الماسح.
قسم سجل للعمليات الأخيرة مع خيارات التراجع وزمن إنقضاء العد التنازلي.
التجربة والقيود:
التعامل مع صلاحيات الكاميرا (عرض رسالة إرشادية، رابط الإعدادات).
حفظ آخر سبب مختار لتسريع العمل المتكرر.
معالجة انقطاع الإنترنت (queue محلية بسيطة باستخدام IndexedDB للسيناريوهات المتقدمة لاحقًا).
البنية البرمجية:
هوكات جديدة useTeacherPointsConfig, useSubmitPointTransaction.
مكونات UI تحت teacher/components/points (مثلاً PointValueButtons, QrScannerModal, DailyUsageBar).
إعادة استخدام أنماط Tailwind مع مراعاة العمل على الأجهزة اللوحية والجوال.
خارطة التنفيذ المقترحة 🛠️
الBackend أولًا:
إنشاء migrations والجداول المذكورة، وتحديث موديلات Student (علاقة pointCards, pointTransactions).
بناء خدمات الأعمال (Quota, Card, Ledger) واختبارها بوحدات Laravel.
إضافة Controllers ومسارات /admin/points و/teacher/points + توثيقها.
دعم QR والبطاقات:
توليد التوكنات (Observer) وتزويد Endpoint لإرجاع بيانات الطباعة.
إعداد Job لصنع ملف PDF عند الطلب (أو توليده عند الحاجة).
الFrontend Admin:
إنشاء هوكات API وتكوين types.
بناء الصفحة متعددة التبويبات مع حالة تحميل وأخطاء.
دمج html2canvas/jspdf لتصدير البطاقات.
الFrontend Teacher:
تحديث الملاحة، إنشاء صفحة TeacherPointsPage.
دمج مكتبة QR (يفضّل @yudiel/react-qr-scanner أو تطوير مخصص حسب قيود PWA).
إدارة الحدود اليومية بـUX واضح.
الاختبارات والجودة:
Laravel Feature Tests لتأكد من الحدود اليومية.
React Testing Library لاختبار المنطق الأساسي (اختيار سبب، التعامل مع أخطاء API).
سيناريوهات end-to-end خفيفة (Playwright) لاحقًا.
الإطلاق والتوعية:
إعداد مستند إرشادي للمدرسة لشرح برنامج النقاط.
مراقبة الاستخدام الأولي عبر تسجيلات Analytics بسيطة (عدّاد منح النقاط لكل يوم).
quality gates
لم يتم تنفيذ build أو اختبارات في هذه المرحلة (تحليل وتخطيط فقط).
requirements coverage
دراسة البرنامج وتحديد المتطلبات: Done
تصميم قاعدة البيانات والـAPIs: Done
تخطيط واجهات الإدارة والمعلمين مع تجربة المسح: Done
إعداد خارطة تنفيذ مفصلة: Done
ملاحظات ختامية
يمكن توسيع النظام لاحقًا بلوحة للطلاب والأهالي، وتنبيهات فورية عبر واتساب أو التطبيق.
عند بدء التنفيذ، يُفضّل العمل على فرع Git منفصل (feature/nokati-points-program) لتتبع التغييرات بسهولة.
أنا جاهز للانتقال إلى مرحلة التنفيذ متى كانت جاهزيتك متوفرة.